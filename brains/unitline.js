// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['inject', 'p2'], function(inject, p2) {
  var Unit;
  return Unit = (function() {
    function Unit(entity, n) {
      this.align = __bind(this.align, this);
      this.separate = __bind(this.separate, this);
      this.step = __bind(this.step, this);
      this.e = entity;
      this.n = n;
    }

    Unit.prototype.step = function() {
      this.separate();
      return this.align();
    };

    Unit.prototype.separate = function() {
      var averagerepulsion, force, istouched;
      averagerepulsion = [0, 0];
      inject.one('each by distance')(this.e.phys.b.position, 25, (function(_this) {
        return function(d, e) {
          var diff;
          if (e === _this.e || (e.ai == null)) {
            return;
          }
          diff = [0, 0];
          p2.vec2.sub(diff, _this.e.phys.b.position, e.phys.b.position);
          p2.vec2.normalize(diff, diff);
          return p2.vec2.add(averagerepulsion, averagerepulsion, diff);
        };
      })(this));
      istouched = p2.vec2.len(averagerepulsion) !== 0;
      inject.one('abs stat')(this.e, {
        istouched: istouched
      });
      if (!istouched) {
        return;
      }
      inject.one('scale to max velocity')(averagerepulsion);
      force = inject.one('calculate steering')(this.e.phys.b.velocity, averagerepulsion);
      p2.vec2.scale(force, force, 0.6);
      return inject.one('apply force')(this.e, force);
    };

    Unit.prototype.align = function() {
      var distances, force, mag;
      this.e.target = null;
      distances = [];
      inject.one('each by distance')(this.e.phys.b.position, 50, (function(_this) {
        return function(d, e) {
          if (e === _this.e || (e.ai == null)) {
            return;
          }
          return distances.push({
            d: d,
            e: e
          });
        };
      })(this));
      if (distances.length === 0) {
        return;
      }
      distances.sort((function(_this) {
        return function(a, b) {
          return a.d - b.d;
        };
      })(this));
      if (distances.length === 1) {
        this.e.target = p2.vec2.clone(distances[0].e.phys.b.position);
      } else {
        this.e.target = inject.one('calculate perpendicular')(distances[0].e.phys.b.position, distances[1].e.phys.b.position, this.e.phys.b.position);
      }
      mag = [0, 0];
      p2.vec2.sub(mag, this.e.target, this.e.phys.b.position);
      inject.one('scale to max velocity')(mag);
      force = inject.one('calculate steering')(this.e.phys.b.velocity, mag);
      p2.vec2.scale(force, force, 0.5);
      return inject.one('apply force')(this.e, force);
    };

    return Unit;

  })();
});
