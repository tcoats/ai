// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['inject', 'p2', 'movement/rotate', 'movement/directions', 'movement/force', 'movement/steer', 'movement/velocity', 'movement/separate', 'movement/cohere', 'movement/align'], function(inject, p2) {
  var Physics;
  Physics = (function() {
    function Physics() {
      this.eachbydistance = __bind(this.eachbydistance, this);
      this.unit = __bind(this.unit, this);
      this.boid = __bind(this.boid, this);
      this.register = __bind(this.register, this);
      this.step = __bind(this.step, this);
      this.maxvelocity = 100;
      this.defaultsteeringforce = 1200;
      this.entities = [];
      this.world = new p2.World({
        gravity: [0, 0]
      });
      inject.bind('step', this.step);
      inject.bind('register physics', this.register);
      inject.bind('each by distance', this.eachbydistance);
    }

    Physics.prototype.step = function() {
      var entity, length, _i, _len, _ref, _results;
      this.world.step(1 / 60);
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        length = p2.vec2.len(entity.b.velocity);
        if (length > this.maxvelocity) {
          p2.vec2.normalize(entity.b.velocity, entity.b.velocity);
          p2.vec2.scale(entity.b.velocity, entity.b.velocity, this.maxvelocity);
        }
        if (entity.b.position[0] < -10) {
          entity.b.position[0] = width + 10;
        }
        if (entity.b.position[0] > width + 10) {
          entity.b.position[0] = -10;
        }
        if (entity.b.position[1] < -10) {
          entity.b.position[1] = height + 10;
        }
        if (entity.b.position[1] > height + 10) {
          _results.push(entity.b.position[1] = -10);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Physics.prototype.register = function(entity, n, p, v) {
      if (this[n] != null) {
        return this[n](entity, p, v);
      }
    };

    Physics.prototype.boid = function(entity, p, v) {
      var body, shape;
      body = new p2.Body({
        mass: 1,
        position: p,
        velocity: v
      });
      body.damping = 0;
      shape = new p2.Circle(8);
      body.addShape(shape);
      this.world.addBody(body);
      return this.entities.push(entity.phys = {
        b: body,
        s: shape,
        e: function() {
          return entity;
        }
      });
    };

    Physics.prototype.unit = function(entity, p, v) {
      var body, shape;
      body = new p2.Body({
        mass: 1,
        position: p,
        velocity: v
      });
      body.damping = 0;
      shape = new p2.Circle(8);
      body.addShape(shape);
      this.world.addBody(body);
      return this.entities.push(entity.phys = {
        b: body,
        s: shape,
        e: function() {
          return entity;
        }
      });
    };

    Physics.prototype.eachbydistance = function(p, r, cb) {
      var distance, entity, _i, _len, _ref, _results;
      _ref = this.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        distance = p2.vec2.dist(p, entity.b.position);
        if (distance > r) {
          continue;
        }
        _results.push(cb(distance, entity.e()));
      }
      return _results;
    };

    return Physics;

  })();
  return new Physics();
});
